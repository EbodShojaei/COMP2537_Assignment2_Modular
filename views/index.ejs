<!--

    /////////////////////////
    // ABOUT EJS
    /////////////////////////

        // JS to add to index.js

        // Enable ejs (default directory folder is 'views' and can contain subdirectories within)
        // e.g., app.set('view engine', 'ejs');

        // Dump HTML in index.ejs

        // Respond with HTML via index.ejs
        // e.g., res.render("index");

        // Setup an .ejs file for each route (e.g., /home, /login, /signup, /members, etc.)

        // In index.js, the below example takes a parameter 'color' as a key value. The .ejs file should have 'color' defined using a '%' tag
        // e.g., res.render("about", {color: color});

        // Make sure to refactor the .ejs files to avoid repeated code (e.g., repeating head tags)
        // Create header.ejs in a subdirectory called 'templates' (e.g., ./views/templates/header.ejs)
        // e.g., <% include("templates/header") %> inside the .ejs file

        // Can create a loop in .ejs
        /* 
        * <% let i=0; %>
        * <% for(i=0; i < users.length; i++) { %>
        * include('template/user', {user: users[i]})
        * <% } %>
        */

        // Via user.ejs...
        // <li><%= user.username %></li>


    /////////////////////////
    // ABOUT MIDDLEWARE
    /////////////////////////
    
        // Express creates a chain of functions

        // Middleware will run, but may not have effect

        // Next middleware is called in the chain of middleware functions

        // e.g., app.use(express.urlencoded...) is a bodyparser middleware that parses the url encoded with request info

        // e.g., app.use(session(...) is a middleware that creates a session to handle requests in a session

        // We need sessions to authorize access to certain web content

        // Create a middleware function that validates sessions to refactor repeated code authenticating requests. If not authenticated, redirect to '/login'
        // NOTE: Use 'next()' to move to the next middleware function

        // If we move to a subpage of a webpage, the authentication used in the webpage applies to the subpage
        // e.g., if '/members' requires authentication, '/members/info' will enforce the authentication 


    /////////////////////////
    // ABOUT AUTHORIZATION
    /////////////////////////
    
        // Add 'user type' to the users in MongoDB database
        // Set type to 'admin' or 'member'
        // Setting the type to 'admin' enables special access to pages requiring admin authentication
        // To implement admin authorization, implement a function that checks if the user is an 'admin'
        // e.g., req.session.user_type = "admin";
        // For the /admin page, we then check if the session is valid, then we check if the admin is authorized

        // Try app.use('/admin', sessionValidation, adminAuthorization);
        // Or just place in app.get('admin', sessionValidation, adminAuthorization, (req, res) => {...});


    /////////////////////////
    // ABOUT BOOTSTRAP
    /////////////////////////
    
        // Create .ejs files for:
        /* 
        * - ./views/templates/header.ejs
        * - ./views/templates/footer.ejs
        * - ./views/templates/svg.ejs
        * - ./views/404.ejs
        */

        // Import Bootstrap via CDN link (url) and add to header.ejs

        // Any svg code can be dumped into svg.ejs and the browser will automatically map the svg to the corresponding elements

-->